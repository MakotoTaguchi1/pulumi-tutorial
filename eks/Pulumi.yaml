name: aws-eks-ec2-private
runtime: yaml
description: An AWS EKS cluster with EC2 instances on private subnets.

resources:
  # Create a new VPC with private subnets.
  myVpc:
    type: awsx:ec2:Vpc
    properties:
      # Specify the NAT gateway configuration using the 'natGateways' property directly
      natGateways:
        # Replace 'strategy: string' with an actual strategy value, e.g., 'Single' or provide specific NAT Gateway configurations
        strategy: "Single" # or use a specific number to create that many gateways
      subnetSpecs:
        - type: "Public"
        - type: "Private"
      # Set additional properties as needed such as DNS support and availability zones
      enableDnsHostnames: true
      availabilityZoneNames: ["ap-northeast-1a", "ap-northeast-1c"]


  # Create an IAM role for the EKS cluster.
  eksRole:
    type: aws:iam:Role
    properties:
      assumeRolePolicy: |
        {
          "Version": "2012-10-17",
          "Statement": [{
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }]
        }

  # Attach required policies to the IAM role.
  eksPolicyAttachment:
    type: aws:iam:RolePolicyAttachment
    properties:
      role: ${eksRole.name}
      policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"

  # Create an EKS cluster with the created VPC and IAM role.
  eksCluster:
    type: eks:Cluster
    properties:
      vpcId: ${myVpc.vpcId}
      privateSubnetIds: ${myVpc.privateSubnetIds}
      instanceType: "t3.nano"
      desiredCapacity: 2
      minSize: 1
      maxSize: 3
      roleMappings:
        - groups:
            - "system:bootstrappers"
            - "system:nodes"
          roleArn: ${eksRole.arn}
          username: "system:node:{{EC2PrivateDNSName}}"
      instanceRoles:
        - ${eksRole} # Use the eksRole as a reference in the array
      skipDefaultNodeGroup: True

  myInstanceProfile:
    type: aws:iam/instanceProfile:InstanceProfile
    properties:
      name: my-instance-profile

  # Assuming the cluster was already created and is named 'myEksCluster'
  # Create a managed node group for the existing EKS cluster
  myNodeGroup:
    type: eks:NodeGroup # or 'eks:ManagedNodeGroup' for a managed node group
    properties:
      cluster: ${eksCluster} # Reference to the existing EKS cluster
      # nodeGroupName: "my-node-group"
      desiredCapacity: 2
      minSize: 1
      maxSize: 3
      instanceType: "t2.nano" # Specify the instance type for the worker nodes
      nodeSubnetIds: ${myVpc.privateSubnetIds}
      # Provide the ARN of the instance profile (role) for node group
      instanceProfile: ${myInstanceProfile}

# Outputs that reference properties must use 'metadata' to access resource properties.
outputs:
  kubeconfig: ${eksCluster.kubeconfig}        # Outputs the kubeconfig of the EKS cluster.
  # clusterName: ${eksCluster.name}             # Outputs the name of the EKS cluster.
  vpcId: ${myVpc.vpcId}
  privateSubnetIds: ${myVpc.privateSubnetIds}
  publicSubnetIds: ${myVpc.publicSubnetIds}
  nodeGroupUrn: ${myNodeGroup.urn} # The URN is the unique identifier for the resource
  instanceProfileArn: ${myInstanceProfile.arn} # ARN of the instance profile

